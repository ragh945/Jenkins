pipeline {
    agent any

    parameters {
        booleanParam(name: 'RELEASE', defaultValue: false, description: 'Is this a Release Candidate?')
    }

    environment {
        RELEASE_VERSION = '1.1.0'
        INT_VERSION = 'R2'
    }

    stages {
        stage('Audit tools') {
            steps {
                auditTools()
            }
        }

        stage('Unit Test') {
            steps {
                dir('java-tomcat-sample') {
                    bat '''
                        echo Executing Unit Tests...
                        mvn test
                    '''
                }
            }
        }

        stage('Build') {
            steps {
                script {
                    env.VERSION_SUFFIX = getBuildVersion()
                }

                echo "Building version: ${env.INT_VERSION} with suffix: ${env.VERSION_SUFFIX}"
                dir('java-tomcat-sample') {
                    packageApplication()
                }
            }
        }

        stage('Publish') {
            steps {
                echo "Archiving WAR file..."
                archiveArtifacts artifacts: 'java-tomcat-sample/target/*.war', fingerprint: true
            }
        }
    }

    post {
        always {
             // cleanWs()
        }
    }
}

// Helper Functions
def getBuildVersion() {
    if (params.RELEASE) {
        return "${env.RELEASE_VERSION}:${env.BUILD_NUMBER}"
    } else {
        return "${env.INT_VERSION}+ci:${env.BUILD_NUMBER}"
    }
}

def auditTools() {
    bat '''
        git --version
        java -version
        mvn -version
    '''
}

def packageApplication() {
    bat """
        mvn versions:set -DnewVersion=${env.VERSION_SUFFIX}-SNAPSHOT
        mvn versions:update-child-modules
        mvn clean package
        echo Listing target directory:
        dir target
    """
}
