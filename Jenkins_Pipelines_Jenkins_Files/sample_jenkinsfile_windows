pipeline {
    agent any
    environment {
        RELEASE = '20.04'
    }
    stages {
        stage('Build') {
            environment {
                LOG_LEVEL = 'INFO'
            }
            parallel {
                stage('windows-arm64') {
                    agent any
                    steps {
                        echo "Building release ${RELEASE} for ${STAGE_NAME} with log level ${LOG_LEVEL}..."
                        bat 'ping -n 11 127.0.0.1 >nul'  // Simulates 10 seconds sleep
                    }
                }
                stage('windows-amd64') {
                    agent any
                    steps {
                        echo "Building release ${RELEASE} for ${STAGE_NAME} with log level ${LOG_LEVEL}..."
                        bat 'ping -n 21 127.0.0.1 >nul'  // Simulates 20 seconds sleep
                    }
                }
                stage('windows-x64') {
                    agent any
                    steps {
                        echo "Building release ${RELEASE} for ${STAGE_NAME} with log level ${LOG_LEVEL}..."
                        bat 'ping -n 31 127.0.0.1 >nul'  // Simulates 30 seconds sleep
                    }
                }
            }
        }
        stage('Test') {
            steps {
                echo "Testing release ${RELEASE}..."
                bat 'echo In Test Step'
            }
        }
        stage('Deploy') {
            input {
                message 'Deploy?'
                ok 'Do it!'
                parameters {
                    string(name: 'TARGET_ENVIRONMENT', defaultValue: 'PROD', description: 'Target deployment environment')
                }
            }
            steps {
                echo "Deploying release ${RELEASE} to environment ${TARGET_ENVIRONMENT}"
                bat 'echo Deployment Done'
            }
        }        
    }
    post {
        always {
            echo 'Prints whether deploy happened or not, success or failure'
        }
        success {
            echo 'Pipeline succeeded!'
        }
        failure {
            echo 'Pipeline failed!'
        }
    }
}
